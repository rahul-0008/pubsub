// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/masterslave.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	SubscribeMaster(ctx context.Context, in *SlaveSubscribeRequest, opts ...grpc.CallOption) (MasterService_SubscribeMasterClient, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) SubscribeMaster(ctx context.Context, in *SlaveSubscribeRequest, opts ...grpc.CallOption) (MasterService_SubscribeMasterClient, error) {
	stream, err := c.cc.NewStream(ctx, &MasterService_ServiceDesc.Streams[0], "/proto.masterService/subscribeMaster", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServiceSubscribeMasterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MasterService_SubscribeMasterClient interface {
	Recv() (*SlaveSubscribeResponse, error)
	grpc.ClientStream
}

type masterServiceSubscribeMasterClient struct {
	grpc.ClientStream
}

func (x *masterServiceSubscribeMasterClient) Recv() (*SlaveSubscribeResponse, error) {
	m := new(SlaveSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	SubscribeMaster(*SlaveSubscribeRequest, MasterService_SubscribeMasterServer) error
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) SubscribeMaster(*SlaveSubscribeRequest, MasterService_SubscribeMasterServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMaster not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_SubscribeMaster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlaveSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServiceServer).SubscribeMaster(m, &masterServiceSubscribeMasterServer{stream})
}

type MasterService_SubscribeMasterServer interface {
	Send(*SlaveSubscribeResponse) error
	grpc.ServerStream
}

type masterServiceSubscribeMasterServer struct {
	grpc.ServerStream
}

func (x *masterServiceSubscribeMasterServer) Send(m *SlaveSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.masterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribeMaster",
			Handler:       _MasterService_SubscribeMaster_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/masterslave.proto",
}
